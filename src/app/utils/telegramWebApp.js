/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Web App
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ expand, requestFullscreen –∏ –¥—Ä—É–≥–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
 */

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram Web App
 */
class TelegramWebAppManager {
  constructor() {
    this.webApp = null;
    this.isInitialized = false;
    this.initPromise = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
   * @returns {Promise<boolean>}
   */
  async init() {
    if (this.initPromise) {
      return this.initPromise;
    }

    this.initPromise = new Promise((resolve) => {
      if (typeof window === 'undefined') {
        resolve(false);
        return;
      }

      const checkAndInit = () => {
        const tg = window.Telegram?.WebApp;
        if (!tg) {
          console.log('Telegram Web App not available');
          resolve(false);
          return;
        }

        this.webApp = tg;
        this.setupWebApp();
        this.isInitialized = true;
        resolve(true);
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
      if (window.Telegram?.WebApp) {
        checkAndInit();
      } else {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        const interval = setInterval(() => {
          if (window.Telegram?.WebApp) {
            checkAndInit();
            clearInterval(interval);
          }
        }, 100);

        // –¢–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          clearInterval(interval);
          resolve(false);
        }, 5000);
      }
    });

    return this.initPromise;
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Web App
   */
  setupWebApp() {
    if (!this.webApp) return;

    console.log('Setting up Telegram Web App...');

    try {
      // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
      this.expand();
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
      this.requestFullscreen();
      
      // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
      this.enableClosingConfirmation();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
      this.setThemeColors();
      
      // –ì–æ—Ç–æ–≤–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      this.ready();
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      this.setupEventListeners();
      
      this.logInfo();
      
    } catch (error) {
      console.error('Error setting up Telegram Web App:', error);
    }
  }

  /**
   * –†–∞—Å—à–∏—Ä—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —ç–∫—Ä–∞–Ω
   */
  expand() {
    if (!this.webApp) return false;
    
    try {
      if (typeof this.webApp.expand === 'function') {
        this.webApp.expand();
        console.log('‚úÖ Telegram Web App expanded');
        return true;
      } else {
        console.log('‚ùå expand() not available');
        return false;
      }
    } catch (error) {
      console.error('Error expanding Telegram Web App:', error);
      return false;
    }
  }

  /**
   * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
   */
  requestFullscreen() {
    if (!this.webApp) return false;
    
    try {
      if (typeof this.webApp.requestFullscreen === 'function') {
        this.webApp.requestFullscreen();
        console.log('‚úÖ Fullscreen requested');
        return true;
      } else {
        console.log('‚ùå requestFullscreen() not available');
        return false;
      }
    } catch (error) {
      console.error('Error requesting fullscreen:', error);
      return false;
    }
  }

  /**
   * –í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  enableClosingConfirmation() {
    if (!this.webApp) return false;
    
    try {
      if (typeof this.webApp.enableClosingConfirmation === 'function') {
        this.webApp.enableClosingConfirmation();
        console.log('‚úÖ Closing confirmation enabled');
        return true;
      } else {
        console.log('‚ùå enableClosingConfirmation() not available');
        return false;
      }
    } catch (error) {
      console.error('Error enabling closing confirmation:', error);
      return false;
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  disableClosingConfirmation() {
    if (!this.webApp) return false;
    
    try {
      if (typeof this.webApp.disableClosingConfirmation === 'function') {
        this.webApp.disableClosingConfirmation();
        console.log('‚úÖ Closing confirmation disabled');
        return true;
      } else {
        console.log('‚ùå disableClosingConfirmation() not available');
        return false;
      }
    } catch (error) {
      console.error('Error disabling closing confirmation:', error);
      return false;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
   */
  setThemeColors(headerColor = '#7370fd', backgroundColor = '#ffffff') {
    if (!this.webApp) return false;
    
    try {
      let success = true;
      
      if (typeof this.webApp.setHeaderColor === 'function') {
        this.webApp.setHeaderColor(headerColor);
        console.log(`‚úÖ Header color set to ${headerColor}`);
      } else {
        console.log('‚ùå setHeaderColor() not available');
        success = false;
      }
      
      if (typeof this.webApp.setBackgroundColor === 'function') {
        this.webApp.setBackgroundColor(backgroundColor);
        console.log(`‚úÖ Background color set to ${backgroundColor}`);
      } else {
        console.log('‚ùå setBackgroundColor() not available');
        success = false;
      }
      
      return success;
    } catch (error) {
      console.error('Error setting theme colors:', error);
      return false;
    }
  }

  /**
   * –°–æ–æ–±—â–∞–µ—Ç Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
   */
  ready() {
    if (!this.webApp) return false;
    
    try {
      if (typeof this.webApp.ready === 'function') {
        this.webApp.ready();
        console.log('‚úÖ Telegram Web App ready');
        return true;
      } else {
        console.log('‚ùå ready() not available');
        return false;
      }
    } catch (error) {
      console.error('Error calling ready:', error);
      return false;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    if (!this.webApp) return;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è viewport
    const handleViewportChanged = () => {
      console.log('üì± Viewport changed:', {
        viewportHeight: this.webApp.viewportHeight,
        viewportStableHeight: this.webApp.viewportStableHeight,
        isExpanded: this.webApp.isExpanded
      });
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
    const handleThemeChanged = () => {
      console.log('üé® Theme changed:', {
        colorScheme: this.webApp.colorScheme,
        themeParams: this.webApp.themeParams
      });
    };

    try {
      this.webApp.onEvent('viewportChanged', handleViewportChanged);
      this.webApp.onEvent('themeChanged', handleThemeChanged);
      console.log('‚úÖ Event listeners set up');
    } catch (error) {
      console.error('Error setting up event listeners:', error);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram Web App
   */
  logInfo() {
    if (!this.webApp) return;

    console.log('üìã Telegram Web App Info:', {
      platform: this.webApp.platform,
      version: this.webApp.version,
      colorScheme: this.webApp.colorScheme,
      themeParams: this.webApp.themeParams,
      isExpanded: this.webApp.isExpanded,
      viewportHeight: this.webApp.viewportHeight,
      viewportStableHeight: this.webApp.viewportStableHeight,
      headerColor: this.webApp.headerColor,
      backgroundColor: this.webApp.backgroundColor,
      isClosingConfirmationEnabled: this.webApp.isClosingConfirmationEnabled
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Ñ—É–Ω–∫—Ü–∏–π
   */
  getSupportInfo() {
    if (!this.webApp) {
      return {
        isAvailable: false,
        features: {}
      };
    }

    return {
      isAvailable: true,
      isInitialized: this.isInitialized,
      platform: this.webApp.platform,
      version: this.webApp.version,
      features: {
        expand: typeof this.webApp.expand === 'function',
        requestFullscreen: typeof this.webApp.requestFullscreen === 'function',
        enableClosingConfirmation: typeof this.webApp.enableClosingConfirmation === 'function',
        setHeaderColor: typeof this.webApp.setHeaderColor === 'function',
        setBackgroundColor: typeof this.webApp.setBackgroundColor === 'function',
        hapticFeedback: !!this.webApp.HapticFeedback,
        ready: typeof this.webApp.ready === 'function'
      },
      state: {
        isExpanded: this.webApp.isExpanded,
        viewportHeight: this.webApp.viewportHeight,
        viewportStableHeight: this.webApp.viewportStableHeight,
        colorScheme: this.webApp.colorScheme
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram Web App
   */
  getWebApp() {
    return this.webApp;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ Telegram Web App
   */
  isReady() {
    return this.isInitialized && this.webApp;
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const telegramWebAppManager = new TelegramWebAppManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const initTelegramWebApp = () => telegramWebAppManager.init();
export const expandTelegramWebApp = () => telegramWebAppManager.expand();
export const requestFullscreen = () => telegramWebAppManager.requestFullscreen();
export const enableClosingConfirmation = () => telegramWebAppManager.enableClosingConfirmation();
export const disableClosingConfirmation = () => telegramWebAppManager.disableClosingConfirmation();
export const setThemeColors = (headerColor, backgroundColor) => telegramWebAppManager.setThemeColors(headerColor, backgroundColor);
export const getTelegramWebApp = () => telegramWebAppManager.getWebApp();
export const getTelegramSupportInfo = () => telegramWebAppManager.getSupportInfo();
export const isTelegramReady = () => telegramWebAppManager.isReady();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { TelegramWebAppManager };

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default telegramWebAppManager;
